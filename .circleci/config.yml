# https://circleci.com/docs/2.0/language-javascript/
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - ~/.cache/yarn
            - node_modules
          key: v1-dependencies-{{ checksum "yarn.lock" }}
      - run: yarn compile
      - run: yarn lint
      # I got this on CircleCI, even with no_output_timeout... seems it hits 4GB RAM limit
      # Creating an optimized production build...
      #              The build failed because the process exited too early.
      #              This probably means the system ran out of memory or someone called
      #              `kill -9` on the process.
      # - run:
      #     name: Webpack build
      #     command: yarn build
      #     no_output_timeout: 5m

  test:
    machine:
      # We can't use a containerized environment since it requires remote docker to start custom containers.
      # However, we can't access the remote docker's network from the primary container. This is a
      # feature, as documented in https://circleci.com/docs/2.0/building-docker-images/#separation-of-environments
      # As a consequence, we cannot use the circleci CLI for this job because "You cannot use the machine
      # executor in local jobs." (https://circleci.com/docs/2.0/local-cli/#limitations-of-running-jobs-locally)
      #
      # Available images: https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run: # start early for less wait time below
          name: Start tgrade and faucet
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            ./scripts/start_all_ci.sh
            docker logout
          background: true
      - run:
          # The images comes with preinstalled nvm, which does not work well with non-login shells
          name: Uninstall nvm
          # Moving to trash is faster than deleting (gvfs-trash is not installed on this image)
          command: |
            nvm --version && nvm ls
            mkdir -p ~/.local/share/Trash && mv "$NVM_DIR" ~/.npm ~/.local/share/Trash
      - run:
          name: Install nodejs
          # In the current image, `sudo apt install nodejs` requires `sudo apt update` which is too slow
          command: |
            curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
            sudo apt-get install -y nodejs
      - run:
          name: Install yarn
          command: |
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update && sudo apt-get install -y yarn
      - run:
          name: Version information
          command: echo "node $(node --version)"; echo "yarn $(yarn --version)"
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile
      # - run: yarn build
      - save_cache:
          name: Save Yarn Package Cache
          key: v1-dependencies-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Wait for chains to start up
          command: |
            timeout 60 bash -c "until curl -s http://localhost:8000/status > /dev/null; do sleep 0.5; done"
      - run:
          name: Deploy contracts
          command: |
            cd ./scripts/tgrade/
            ./init.sh
      - run:
          command: yarn test --watchAll=false
      - run:
          name: Stop chains
          command: |
            docker logout
            ./scripts/stop_all.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test
